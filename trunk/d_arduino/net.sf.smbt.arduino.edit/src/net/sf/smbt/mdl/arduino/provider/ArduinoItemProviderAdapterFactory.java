/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.mdl.arduino.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.mdl.arduino.util.ArduinoAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ArduinoItemProviderAdapterFactory extends ArduinoAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ArduinoItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.Arduino} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArduinoItemProvider arduinoItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.Arduino}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArduinoAdapter() {
		if (arduinoItemProvider == null) {
			arduinoItemProvider = new ArduinoItemProvider(this);
		}

		return arduinoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.DigitalPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DigitalPortItemProvider digitalPortItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.DigitalPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDigitalPortAdapter() {
		if (digitalPortItemProvider == null) {
			digitalPortItemProvider = new DigitalPortItemProvider(this);
		}

		return digitalPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.AnalogPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalogPortItemProvider analogPortItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.AnalogPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalogPortAdapter() {
		if (analogPortItemProvider == null) {
			analogPortItemProvider = new AnalogPortItemProvider(this);
		}

		return analogPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.RxPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RxPortItemProvider rxPortItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.RxPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRxPortAdapter() {
		if (rxPortItemProvider == null) {
			rxPortItemProvider = new RxPortItemProvider(this);
		}

		return rxPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.TxPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TxPortItemProvider txPortItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.TxPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTxPortAdapter() {
		if (txPortItemProvider == null) {
			txPortItemProvider = new TxPortItemProvider(this);
		}

		return txPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.GndPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GndPortItemProvider gndPortItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.GndPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGndPortAdapter() {
		if (gndPortItemProvider == null) {
			gndPortItemProvider = new GndPortItemProvider(this);
		}

		return gndPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.Port3V3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Port3V3ItemProvider port3V3ItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.Port3V3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPort3V3Adapter() {
		if (port3V3ItemProvider == null) {
			port3V3ItemProvider = new Port3V3ItemProvider(this);
		}

		return port3V3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.RstPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RstPortItemProvider rstPortItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.RstPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRstPortAdapter() {
		if (rstPortItemProvider == null) {
			rstPortItemProvider = new RstPortItemProvider(this);
		}

		return rstPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.Port5V} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Port5VItemProvider port5VItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.Port5V}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPort5VAdapter() {
		if (port5VItemProvider == null) {
			port5VItemProvider = new Port5VItemProvider(this);
		}

		return port5VItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.Port9V} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Port9VItemProvider port9VItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.Port9V}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPort9VAdapter() {
		if (port9VItemProvider == null) {
			port9VItemProvider = new Port9VItemProvider(this);
		}

		return port9VItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.PortIO7} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortIO7ItemProvider portIO7ItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.PortIO7}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortIO7Adapter() {
		if (portIO7ItemProvider == null) {
			portIO7ItemProvider = new PortIO7ItemProvider(this);
		}

		return portIO7ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.AREFPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AREFPortItemProvider arefPortItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.AREFPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAREFPortAdapter() {
		if (arefPortItemProvider == null) {
			arefPortItemProvider = new AREFPortItemProvider(this);
		}

		return arefPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.PortVIN} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortVINItemProvider portVINItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.PortVIN}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortVINAdapter() {
		if (portVINItemProvider == null) {
			portVINItemProvider = new PortVINItemProvider(this);
		}

		return portVINItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.mdl.arduino.Bench} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BenchItemProvider benchItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.mdl.arduino.Bench}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBenchAdapter() {
		if (benchItemProvider == null) {
			benchItemProvider = new BenchItemProvider(this);
		}

		return benchItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (arduinoItemProvider != null) arduinoItemProvider.dispose();
		if (portItemProvider != null) portItemProvider.dispose();
		if (digitalPortItemProvider != null) digitalPortItemProvider.dispose();
		if (analogPortItemProvider != null) analogPortItemProvider.dispose();
		if (rxPortItemProvider != null) rxPortItemProvider.dispose();
		if (txPortItemProvider != null) txPortItemProvider.dispose();
		if (gndPortItemProvider != null) gndPortItemProvider.dispose();
		if (port3V3ItemProvider != null) port3V3ItemProvider.dispose();
		if (rstPortItemProvider != null) rstPortItemProvider.dispose();
		if (port5VItemProvider != null) port5VItemProvider.dispose();
		if (port9VItemProvider != null) port9VItemProvider.dispose();
		if (portIO7ItemProvider != null) portIO7ItemProvider.dispose();
		if (arefPortItemProvider != null) arefPortItemProvider.dispose();
		if (portVINItemProvider != null) portVINItemProvider.dispose();
		if (benchItemProvider != null) benchItemProvider.dispose();
	}

}
